{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/cfill.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided-base-reinterpret-complex64';\nimport realf from '@stdlib/complex-float32-real';\nimport imagf from '@stdlib/complex-float32-imag';\n\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a single-precision complex floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {ComplexLike} alpha - scalar constant\n* @param {Complex64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Complex64Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32-ctor';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n*\n* var arr = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var x = new Complex64Array( arr );\n*\n* var alpha = new Complex64( 10.0, 10.0 );\n*\n* cfill( x.length, alpha, x, 1, 0 );\n*\n* var y = x.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( y );\n* // returns 10.0\n*\n* var im = imagf( y );\n* // returns 10.0\n*/\nfunction cfill( N, alpha, x, stride, offset ) {\n\tvar view;\n\tvar re;\n\tvar im;\n\tvar ix;\n\tvar m;\n\tvar i;\n\tvar j;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Decompose the constant into its real and imaginary components:\n\tre = realf( alpha );\n\tim = imagf( alpha );\n\n\t// Reinterpret the complex input array as a real-valued array:\n\tview = reinterpret( x, 0 );\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tj = ix * 2;\n\t\t\t\tview[ j ] = re;\n\t\t\t\tview[ j+1 ] = im;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tj = ix * 2;\n\t\t\tview[ j ] = re;\n\t\t\tview[ j+1 ] = im;\n\t\t\tview[ j+2 ] = re;\n\t\t\tview[ j+3 ] = im;\n\t\t\tview[ j+4 ] = re;\n\t\t\tview[ j+5 ] = im;\n\t\t\tview[ j+6 ] = re;\n\t\t\tview[ j+7 ] = im;\n\t\t\tview[ j+8 ] = re;\n\t\t\tview[ j+9 ] = im;\n\t\t\tview[ j+10 ] = re;\n\t\t\tview[ j+11 ] = im;\n\t\t\tview[ j+12 ] = re;\n\t\t\tview[ j+13 ] = im;\n\t\t\tview[ j+14 ] = re;\n\t\t\tview[ j+15 ] = im;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tj = ix * 2;\n\t\tview[ j ] = re;\n\t\tview[ j+1 ] = im;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default cfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Fills a single-precision complex floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {ComplexLike} alpha - scalar constant\n* @param {Complex64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Complex64Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32-ctor';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n*\n* var arr = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var x = new Complex64Array( arr );\n*\n* var alpha = new Complex64( 10.0, 10.0 );\n*\n* cfill( x.length, alpha, x, 1 );\n*\n* var y = x.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( y );\n* // returns 10.0\n*\n* var im = imagf( y );\n* // returns 10.0\n*/\nfunction cfill( N, alpha, x, stride ) {\n\treturn ndarray( N, alpha, x, stride, stride2offset( N, stride ) );\n}\n\n\n// EXPORTS //\n\nexport default cfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cfill from './cfill.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( cfill, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default cfill;\n"],"names":["M","cfill","N","alpha","x","stride","offset","view","re","im","ix","m","i","j","realf","imagf","reinterpret","ndarray","stride2offset","setReadOnly"],"mappings":";;wgBA6BA,IAAIA,EAAI,EAsCR,SAASC,EAAOC,EAAGC,EAAOC,EAAGC,EAAQC,GACpC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKX,GAAK,EACT,OAAOE,EAYR,GAVAM,EAAKJ,EAGLE,EAAKM,EAAOX,GACZM,EAAKM,EAAOZ,GAGZI,EAAOS,EAAaZ,EAAG,GAGP,IAAXC,EAAe,CAInB,IAHAM,EAAIT,EAAIF,GAGC,EACR,IAAMY,EAAI,EAAGA,EAAID,EAAGC,IAEnBL,EADAM,EAAS,EAALH,GACQF,EACZD,EAAMM,EAAE,GAAMJ,EACdC,GAAML,EAGR,GAAKH,EAAIF,EACR,OAAOI,EAER,IAAMQ,EAAID,EAAGC,EAAIV,EAAGU,GAAKZ,EAExBO,EADAM,EAAS,EAALH,GACQF,EACZD,EAAMM,EAAE,GAAMJ,EACdF,EAAMM,EAAE,GAAML,EACdD,EAAMM,EAAE,GAAMJ,EACdF,EAAMM,EAAE,GAAML,EACdD,EAAMM,EAAE,GAAMJ,EACdF,EAAMM,EAAE,GAAML,EACdD,EAAMM,EAAE,GAAMJ,EACdF,EAAMM,EAAE,GAAML,EACdD,EAAMM,EAAE,GAAMJ,EACdF,EAAMM,EAAE,IAAOL,EACfD,EAAMM,EAAE,IAAOJ,EACfF,EAAMM,EAAE,IAAOL,EACfD,EAAMM,EAAE,IAAOJ,EACfF,EAAMM,EAAE,IAAOL,EACfD,EAAMM,EAAE,IAAOJ,EACfC,GAAMV,EAEP,OAAOI,CACP,CACD,IAAMQ,EAAI,EAAGA,EAAIV,EAAGU,IAEnBL,EADAM,EAAS,EAALH,GACQF,EACZD,EAAMM,EAAE,GAAMJ,EACdC,GAAML,EAEP,OAAOD,CACR,CCzEA,SAASH,EAAOC,EAAGC,EAAOC,EAAGC,GAC5B,OAAOY,EAASf,EAAGC,EAAOC,EAAGC,EAAQa,EAAehB,EAAGG,GACxD,CCjCAc,EAAAlB,EAAA,UAAAgB"}