{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/cfill.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar reinterpret = require( '@stdlib/strided-base-reinterpret-complex64' );\nvar realf = require( '@stdlib/complex-float32-real' );\nvar imagf = require( '@stdlib/complex-float32-imag' );\n\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a single-precision complex floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {ComplexLike} alpha - scalar constant\n* @param {Complex64Array} x - input array\n* @param {integer} strideX - index increment\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {Complex64Array} input array\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var Complex64 = require( '@stdlib/complex-float32-ctor' );\n* var realf = require( '@stdlib/complex-float32-real' );\n* var imagf = require( '@stdlib/complex-float32-imag' );\n*\n* var arr = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var x = new Complex64Array( arr );\n*\n* var alpha = new Complex64( 10.0, 10.0 );\n*\n* cfill( x.length, alpha, x, 1, 0 );\n*\n* var y = x.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( y );\n* // returns 10.0\n*\n* var im = imagf( y );\n* // returns 10.0\n*/\nfunction cfill( N, alpha, x, strideX, offsetX ) {\n\tvar view;\n\tvar re;\n\tvar im;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\n\t// Decompose the constant into its real and imaginary components:\n\tre = realf( alpha );\n\tim = imagf( alpha );\n\n\t// Reinterpret the complex input array as a real-valued array:\n\tview = reinterpret( x, 0 );\n\n\t// Adjust the stride and offset according to real-valued array:\n\tix = offsetX * 2;\n\tstrideX *= 2;\n\n\t// Use loop unrolling if the stride is equal to `2`...\n\tif ( strideX === 2 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tview[ ix ] = re;\n\t\t\t\tview[ ix+1 ] = im;\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tview[ ix ] = re;\n\t\t\tview[ ix+1 ] = im;\n\t\t\tview[ ix+2 ] = re;\n\t\t\tview[ ix+3 ] = im;\n\t\t\tview[ ix+4 ] = re;\n\t\t\tview[ ix+5 ] = im;\n\t\t\tview[ ix+6 ] = re;\n\t\t\tview[ ix+7 ] = im;\n\t\t\tview[ ix+8 ] = re;\n\t\t\tview[ ix+9 ] = im;\n\t\t\tview[ ix+10 ] = re;\n\t\t\tview[ ix+11 ] = im;\n\t\t\tview[ ix+12 ] = re;\n\t\t\tview[ ix+13 ] = im;\n\t\t\tview[ ix+14 ] = re;\n\t\t\tview[ ix+15 ] = im;\n\t\t\tix += M * 2;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tview[ ix ] = re;\n\t\tview[ ix+1 ] = im;\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cfill;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Fills a single-precision complex floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {ComplexLike} alpha - scalar constant\n* @param {Complex64Array} x - input array\n* @param {integer} strideX - index increment\n* @returns {Complex64Array} input array\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var Complex64 = require( '@stdlib/complex-float32-ctor' );\n* var realf = require( '@stdlib/complex-float32-real' );\n* var imagf = require( '@stdlib/complex-float32-imag' );\n*\n* var arr = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var x = new Complex64Array( arr );\n*\n* var alpha = new Complex64( 10.0, 10.0 );\n*\n* cfill( x.length, alpha, x, 1 );\n*\n* var y = x.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( y );\n* // returns 10.0\n*\n* var im = imagf( y );\n* // returns 10.0\n*/\nfunction cfill( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cfill;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar cfill = require( './cfill.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( cfill, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = cfill;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a single-precision complex floating-point strided array with a specified scalar constant.\n*\n* @module @stdlib/blas-ext-base-cfill\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var Complex64 = require( '@stdlib/complex-float32-ctor' );\n* var realf = require( '@stdlib/complex-float32-real' );\n* var imagf = require( '@stdlib/complex-float32-imag' );\n* var cfill = require( '@stdlib/blas-ext-base-cfill' );\n*\n* var arr = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var x = new Complex64Array( arr );\n*\n* var alpha = new Complex64( 10.0, 10.0 );\n*\n* cfill( x.length, alpha, x, 1 );\n*\n* var y = x.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( y );\n* // returns 10.0\n*\n* var im = imagf( y );\n* // returns 10.0\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar cfill;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tcfill = main;\n} else {\n\tcfill = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cfill;\n\n// exports: { \"ndarray\": \"cfill.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,4CAA6C,EACpEC,EAAQ,QAAS,8BAA+B,EAChDC,EAAQ,QAAS,8BAA+B,EAKhDC,EAAI,EAsCR,SAASC,EAAOC,EAAGC,EAAOC,EAAGC,EAASC,EAAU,CAC/C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOE,EAeR,GAXAI,EAAKV,EAAOK,CAAM,EAClBM,EAAKV,EAAOI,CAAM,EAGlBI,EAAOV,EAAaO,EAAG,CAAE,EAGzBM,EAAKJ,EAAU,EACfD,GAAW,EAGNA,IAAY,EAAI,CAIpB,GAHAM,EAAIT,EAAIF,EAGHW,EAAI,EACR,IAAMC,EAAI,EAAGA,EAAID,EAAGC,IACnBL,EAAMG,CAAG,EAAIF,EACbD,EAAMG,EAAG,CAAE,EAAID,EACfC,GAAML,EAGR,GAAKH,EAAIF,EACR,OAAOI,EAER,IAAMQ,EAAID,EAAGC,EAAIV,EAAGU,GAAKZ,EACxBO,EAAMG,CAAG,EAAIF,EACbD,EAAMG,EAAG,CAAE,EAAID,EACfF,EAAMG,EAAG,CAAE,EAAIF,EACfD,EAAMG,EAAG,CAAE,EAAID,EACfF,EAAMG,EAAG,CAAE,EAAIF,EACfD,EAAMG,EAAG,CAAE,EAAID,EACfF,EAAMG,EAAG,CAAE,EAAIF,EACfD,EAAMG,EAAG,CAAE,EAAID,EACfF,EAAMG,EAAG,CAAE,EAAIF,EACfD,EAAMG,EAAG,CAAE,EAAID,EACfF,EAAMG,EAAG,EAAG,EAAIF,EAChBD,EAAMG,EAAG,EAAG,EAAID,EAChBF,EAAMG,EAAG,EAAG,EAAIF,EAChBD,EAAMG,EAAG,EAAG,EAAID,EAChBF,EAAMG,EAAG,EAAG,EAAIF,EAChBD,EAAMG,EAAG,EAAG,EAAID,EAChBC,GAAMV,EAAI,EAEX,OAAOI,CACR,CACA,IAAMQ,EAAI,EAAGA,EAAIV,EAAGU,IACnBL,EAAMG,CAAG,EAAIF,EACbD,EAAMG,EAAG,CAAE,EAAID,EACfC,GAAML,EAEP,OAAOD,CACR,CAKAR,EAAO,QAAUK,ICzIjB,IAAAY,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IAqCd,SAASC,EAAOC,EAAGC,EAAOC,EAAGC,EAAU,CACtC,OAAOL,EAASE,EAAGC,EAAOC,EAAGC,EAASN,EAAeG,EAAGG,CAAQ,CAAE,CACnE,CAKAP,EAAO,QAAUG,ICnEjB,IAAAK,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAQ,IACRC,EAAU,IAKdF,EAAaC,EAAO,UAAWC,CAAQ,EAKvCH,EAAO,QAAUE,ICkBjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAQD,EAERC,EAAQC,EAMT,OAAO,QAAUD",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "reinterpret", "realf", "imagf", "M", "cfill", "N", "alpha", "x", "strideX", "offsetX", "view", "re", "im", "ix", "m", "i", "require_cfill", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "cfill", "N", "alpha", "x", "strideX", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "cfill", "ndarray", "join", "tryRequire", "isError", "main", "cfill", "tmp"]
}
